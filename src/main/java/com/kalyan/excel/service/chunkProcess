import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

@SpringBootApplication
public class ExcelProcessorApplication {

    public static void main(String[] args) {
        SpringApplication.run(ExcelProcessorApplication.class, args);
    }

    @RestController
    public static class ExcelController {

        @PostMapping("/upload")
        public ResponseEntity<String> uploadExcelChunk(@RequestParam("file") MultipartFile file) {
            if (file.isEmpty()) {
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Please upload an Excel file.");
            }

            try {
                List<MyData> dataList = new ArrayList<>();
                ExcelUtil.parseExcelChunked(file, dataList::add);
                // Process the accumulated data list or return it as needed
                return ResponseEntity.ok("Excel file uploaded and processed successfully.");
            } catch (IOException e) {
                e.printStackTrace();
                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Failed to process Excel file.");
            }
        }
    }

    // Utility class to parse Excel file using chunked processing
    public static class ExcelUtil {
        public static void parseExcelChunked(MultipartFile file, DataConsumer dataConsumer) throws IOException {
            // Use a library like Apache POI to parse Excel files
            // Example:
            // FileInputStream inputStream = new FileInputStream(file);
            // Workbook workbook = new XSSFWorkbook(inputStream);
            // Iterate over rows and cells to extract data
            // Call the dataConsumer for each chunk of data
            // Close workbook and input stream when done
            // This method will accumulate the parsed data and pass it to the consumer function
        }

        // Functional interface to consume data in chunks
        public interface DataConsumer {
            void accept(List<MyData> dataList);
        }
    }

    // Model class representing your data
    public static class MyData {
        // Define fields corresponding to your Excel columns
    }
}